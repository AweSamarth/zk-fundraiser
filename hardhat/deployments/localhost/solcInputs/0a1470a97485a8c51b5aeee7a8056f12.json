{
  "language": "Solidity",
  "sources": {
    "contracts/ZkFundraiser.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18 ;\r\n\r\ncontract ZkFundraiser{\r\n\r\n    error noBalance();\r\n\r\n    event CampaignCreated(address _address, uint64 indexed _id, string _title, string _description );\r\n\r\n    struct Campaign{\r\n        address campaigner;\r\n        uint64 id;\r\n        uint256 amountNeeded;\r\n        uint256 amountReceived;\r\n        \r\n    }\r\n\r\n    uint64 counter;\r\n\r\n    mapping(uint64=>Campaign) campaignGetter;\r\n    mapping(address=> uint64[]) onesCampaigns;\r\n    mapping(address=>uint256) balances;\r\n\r\n\r\n    function createCampaign(string memory _title, string memory _description, uint128 _ethAmountNeeded) public{\r\n\r\n\r\n        Campaign memory toBePushed = Campaign({campaigner:msg.sender, id:++counter, amountReceived:0, amountNeeded:_ethAmountNeeded*10**18});\r\n        campaignGetter[counter] = toBePushed;\r\n        onesCampaigns[msg.sender].push(counter);\r\n        emit CampaignCreated(msg.sender, counter, _title, _description);\r\n\r\n\r\n    } \r\n\r\n    function getCampaign(uint64 _id) public view returns(Campaign memory){\r\n        return campaignGetter[_id];\r\n\r\n\r\n    }\r\n\r\n    function getOnesCampaigns(address _address) public view returns(uint64[] memory){\r\n        return onesCampaigns[_address];\r\n        \r\n    }\r\n\r\n    function fundCampaign(uint64 _id)public payable {\r\n        campaignGetter[_id].amountReceived+=msg.value;\r\n        balances[msg.sender]+=msg.value;\r\n\r\n\r\n    }\r\n\r\n    function withdrawAll() public {\r\n       if (balances[msg.sender]>0){\r\n           uint256 tempForWithdrawing=balances[msg.sender];\r\n           balances[msg.sender]=0;\r\n           payable(msg.sender).transfer(tempForWithdrawing);\r\n\r\n       }\r\n\r\n       else{\r\n           revert noBalance();\r\n       }\r\n        \r\n    }\r\n\r\n    function getBalance() public returns(uint256){\r\n        return balances[msg.sender];\r\n    }\r\n\r\n    fallback() external payable{}\r\n    receive() external payable{}\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}